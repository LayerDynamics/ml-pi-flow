# .env.example - Environment Variables for ML Platform Suite

This file lists all environment variables required to configure and deploy the ML platform components. Copy it to `.env` and fill in your values.

---

## 1. LABEL STUDIO SETTINGS

### 1.1 Authentication

# Generate an API token in Label Studio:

# 1. Start Label Studio locally: `label-studio start`

# 2. Open [http://localhost:8080](http://localhost:8080) in your browser

# 3. Click your user avatar → Account Settings → API Tokens → Create new token

# 4. Copy the token value and paste below.

LABEL\_STUDIO\_API\_KEY=your\_label\_studio\_api\_key\_here

### 1.2 Host Binding

# Address and port Label Studio listens on (inside Docker)

LABEL\_STUDIO\_HOST=0.0.0.0
LABEL\_STUDIO\_PORT=8080

### 1.3 Database (Optional Postgres)

# By default, Label Studio uses SQLite. To use PostgreSQL:

# a) Provision a Postgres server, create database and user:

# psql -U postgres -c "CREATE DATABASE labelstudio;"

# psql -U postgres -c "CREATE USER ls\_user WITH PASSWORD 'ls\_password';"

# psql -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE labelstudio TO ls\_user;"

# b) Uncomment and set these:

\#LABEL\_STUDIO\_DB\_ENGINE=postgresql
\#LABEL\_STUDIO\_DB\_HOST=postgres
\#LABEL\_STUDIO\_DB\_PORT=5432
\#LABEL\_STUDIO\_DB\_NAME=labelstudio
\#LABEL\_STUDIO\_DB\_USER=ls\_user
\#LABEL\_STUDIO\_DB\_PASSWORD=ls\_password

### 1.4 Local File Serving

# Enable Label Studio to serve files mounted in `/label-studio/data`

LABEL\_STUDIO\_LOCAL\_FILES\_SERVING\_ENABLED=true

---

## 2. MLFLOW TRACKING SERVER

# The URI clients (your code, dashboard) use to reach MLflow

# Default points at Docker Compose service name on port 5000

MLFLOW\_TRACKING\_URI=[http://mlflow:5000](http://mlflow:5000)

---

## 3. VECTOR DATABASE

# Host and port of your embedding store (ChromaDB or Qdrant)

VECTOR\_DB\_HOST=vector\_db
VECTOR\_DB\_PORT=8000

---

## 4. SSL / CERTBOT

# Email for Let's Encrypt certificate registration and renewal notices

CERTBOT\_EMAIL=[you@example.com](mailto:you@example.com)

---

## 5. DOCKER COMPOSE OVERRIDES (Optional)

# Override Docker Compose project name (avoids name collisions)

\#COMPOSE\_PROJECT\_NAME=ml\_platform

---

# How to use:

# 1. Copy this template: `cp .env.example .env`

# 2. Open `.env` and replace placeholder values.

# 3. Run your deployment scripts:

# ./scripts/setup\_environment.sh
